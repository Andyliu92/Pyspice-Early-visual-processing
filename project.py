
from PySpice.Unit import *
import PySpice.Logging.Logging as Logging
from PySpice.Spice.Netlist import Circuit
import PySpice
import sys
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import math


logger = Logging.setup_logging()

if sys.platform == "linux" or sys.platform == "lunix2":
    PySpice.Spice.Simulation.CircuitSimulator.DEFAULT_SIMULATOR = 'ngspice-subprocess'
elif sys.platform == "win32":
    pass

TESTING = True

# Functions
# 18 min of the lec 2 on youtube


def format_output(analysis):
    sim_res_dict = {}  # Create a dict

    for node in analysis.nodes.values():
        data_label = "%s" % str(node)
        sim_res_dict[data_label] = np.array(node)

    return sim_res_dict


def heatmap(res_arr,  filepath='', mapname='', sequence=0, amount=1, data_max=-314, data_min=-314, start_point=1):
    if data_min == -314:
        data_min = res_arr.min()
        if sequence == 0:
            print('Min: ', data_min)

    if data_max == -314:
        data_max = res_arr.max()
        if sequence == 0:
            print('Max: ', data_max)

    seq_bit = int(math.log10(amount-start_point+1))+1
    plt.figure(figsize=(10, 10))

    heatmap = sns.heatmap(res_arr, annot=True, fmt='0.5f', linewidths=.5, vmin=data_min, vmax=data_max, annot_kws={
                          'size': 8, 'weight': 'normal'})
    # a = mapname + '%.*d' % (seq_bit, sequence)
    heatmap.set_title(mapname + '%.*d' % (seq_bit, sequence+1-start_point))

    res_fig = heatmap.get_figure()
    a = filepath + mapname + '%.*d' % (seq_bit, sequence+1) + '.jpg'
    res_fig.savefig(filepath + mapname + '%.*d' %
                    (seq_bit, sequence+1-start_point) + '.jpg')
    plt.close()


def getArray(analysis_dict, nodetype, row, column, sequence=0):
    res_arr = np.empty([row, column], dtype=float)
    for i in range(0, row, 1):
        for j in range(0, column, 1):
            nodename = nodetype + '_%d_%d' % (i+1, j+1)
            res_arr[i][j] = analysis_dict[nodename][sequence]

    del sequence
    return res_arr


def mkdir(path):
    # 引入模块
    import os
    # 去除首位空格
    path = path.strip()
    # 去除尾部 \ 符号
    path = path.rstrip("\\")
    # 判断路径是否存在
    # 存在     True
    # 不存在   False
    isExists = os.path.exists(path)
    # 判断结果
    if not isExists:
        # 如果不存在则创建目录
        # 创建目录操作函数
        os.makedirs(path)
        print(path + ' 创建成功')
        return True
    else:
        # 如果目录存在则不创建，并提示目录已存在
        print(path + ' 目录已存在')
        return False


# Create a Circuit
circuit = Circuit('voltage divider')

# Create a Simulator
simulator = circuit.simulator(temperature=25, nominal_temperature=25)

# add components to the circuit
row = 11
column = 11
r_net = 620@u_Ohm
r_out = 1200@u_Ohm
v_ambient = 0@u_mV
c = 240@u_uF
c_init = 0@u_V
# W-E resistors
circuit.R('1_1_1_2', 'net_1_1', 'net_1_2', r_net)
circuit.R('1_2_1_3', 'net_1_2', 'net_1_3', r_net)
circuit.R('1_3_1_4', 'net_1_3', 'net_1_4', r_net)
circuit.R('1_4_1_5', 'net_1_4', 'net_1_5', r_net)
circuit.R('1_5_1_6', 'net_1_5', 'net_1_6', r_net)
circuit.R('1_6_1_7', 'net_1_6', 'net_1_7', r_net)
circuit.R('1_7_1_8', 'net_1_7', 'net_1_8', r_net)
circuit.R('1_8_1_9', 'net_1_8', 'net_1_9', r_net)
circuit.R('1_9_1_10', 'net_1_9', 'net_1_10', r_net)
circuit.R('1_10_1_11', 'net_1_10', 'net_1_11', r_net)
circuit.R('2_1_2_2', 'net_2_1', 'net_2_2', r_net)
circuit.R('2_2_2_3', 'net_2_2', 'net_2_3', r_net)
circuit.R('2_3_2_4', 'net_2_3', 'net_2_4', r_net)
circuit.R('2_4_2_5', 'net_2_4', 'net_2_5', r_net)
circuit.R('2_5_2_6', 'net_2_5', 'net_2_6', r_net)
circuit.R('2_6_2_7', 'net_2_6', 'net_2_7', r_net)
circuit.R('2_7_2_8', 'net_2_7', 'net_2_8', r_net)
circuit.R('2_8_2_9', 'net_2_8', 'net_2_9', r_net)
circuit.R('2_9_2_10', 'net_2_9', 'net_2_10', r_net)
circuit.R('2_10_2_11', 'net_2_10', 'net_2_11', r_net)
circuit.R('3_1_3_2', 'net_3_1', 'net_3_2', r_net)
circuit.R('3_2_3_3', 'net_3_2', 'net_3_3', r_net)
circuit.R('3_3_3_4', 'net_3_3', 'net_3_4', r_net)
circuit.R('3_4_3_5', 'net_3_4', 'net_3_5', r_net)
circuit.R('3_5_3_6', 'net_3_5', 'net_3_6', r_net)
circuit.R('3_6_3_7', 'net_3_6', 'net_3_7', r_net)
circuit.R('3_7_3_8', 'net_3_7', 'net_3_8', r_net)
circuit.R('3_8_3_9', 'net_3_8', 'net_3_9', r_net)
circuit.R('3_9_3_10', 'net_3_9', 'net_3_10', r_net)
circuit.R('3_10_3_11', 'net_3_10', 'net_3_11', r_net)
circuit.R('4_1_4_2', 'net_4_1', 'net_4_2', r_net)
circuit.R('4_2_4_3', 'net_4_2', 'net_4_3', r_net)
circuit.R('4_3_4_4', 'net_4_3', 'net_4_4', r_net)
circuit.R('4_4_4_5', 'net_4_4', 'net_4_5', r_net)
circuit.R('4_5_4_6', 'net_4_5', 'net_4_6', r_net)
circuit.R('4_6_4_7', 'net_4_6', 'net_4_7', r_net)
circuit.R('4_7_4_8', 'net_4_7', 'net_4_8', r_net)
circuit.R('4_8_4_9', 'net_4_8', 'net_4_9', r_net)
circuit.R('4_9_4_10', 'net_4_9', 'net_4_10', r_net)
circuit.R('4_10_4_11', 'net_4_10', 'net_4_11', r_net)
circuit.R('5_1_5_2', 'net_5_1', 'net_5_2', r_net)
circuit.R('5_2_5_3', 'net_5_2', 'net_5_3', r_net)
circuit.R('5_3_5_4', 'net_5_3', 'net_5_4', r_net)
circuit.R('5_4_5_5', 'net_5_4', 'net_5_5', r_net)
circuit.R('5_5_5_6', 'net_5_5', 'net_5_6', r_net)
circuit.R('5_6_5_7', 'net_5_6', 'net_5_7', r_net)
circuit.R('5_7_5_8', 'net_5_7', 'net_5_8', r_net)
circuit.R('5_8_5_9', 'net_5_8', 'net_5_9', r_net)
circuit.R('5_9_5_10', 'net_5_9', 'net_5_10', r_net)
circuit.R('5_10_5_11', 'net_5_10', 'net_5_11', r_net)
circuit.R('6_1_6_2', 'net_6_1', 'net_6_2', r_net)
circuit.R('6_2_6_3', 'net_6_2', 'net_6_3', r_net)
circuit.R('6_3_6_4', 'net_6_3', 'net_6_4', r_net)
circuit.R('6_4_6_5', 'net_6_4', 'net_6_5', r_net)
circuit.R('6_5_6_6', 'net_6_5', 'net_6_6', r_net)
circuit.R('6_6_6_7', 'net_6_6', 'net_6_7', r_net)
circuit.R('6_7_6_8', 'net_6_7', 'net_6_8', r_net)
circuit.R('6_8_6_9', 'net_6_8', 'net_6_9', r_net)
circuit.R('6_9_6_10', 'net_6_9', 'net_6_10', r_net)
circuit.R('6_10_6_11', 'net_6_10', 'net_6_11', r_net)
circuit.R('7_1_7_2', 'net_7_1', 'net_7_2', r_net)
circuit.R('7_2_7_3', 'net_7_2', 'net_7_3', r_net)
circuit.R('7_3_7_4', 'net_7_3', 'net_7_4', r_net)
circuit.R('7_4_7_5', 'net_7_4', 'net_7_5', r_net)
circuit.R('7_5_7_6', 'net_7_5', 'net_7_6', r_net)
circuit.R('7_6_7_7', 'net_7_6', 'net_7_7', r_net)
circuit.R('7_7_7_8', 'net_7_7', 'net_7_8', r_net)
circuit.R('7_8_7_9', 'net_7_8', 'net_7_9', r_net)
circuit.R('7_9_7_10', 'net_7_9', 'net_7_10', r_net)
circuit.R('7_10_7_11', 'net_7_10', 'net_7_11', r_net)
circuit.R('8_1_8_2', 'net_8_1', 'net_8_2', r_net)
circuit.R('8_2_8_3', 'net_8_2', 'net_8_3', r_net)
circuit.R('8_3_8_4', 'net_8_3', 'net_8_4', r_net)
circuit.R('8_4_8_5', 'net_8_4', 'net_8_5', r_net)
circuit.R('8_5_8_6', 'net_8_5', 'net_8_6', r_net)
circuit.R('8_6_8_7', 'net_8_6', 'net_8_7', r_net)
circuit.R('8_7_8_8', 'net_8_7', 'net_8_8', r_net)
circuit.R('8_8_8_9', 'net_8_8', 'net_8_9', r_net)
circuit.R('8_9_8_10', 'net_8_9', 'net_8_10', r_net)
circuit.R('8_10_8_11', 'net_8_10', 'net_8_11', r_net)
circuit.R('9_1_9_2', 'net_9_1', 'net_9_2', r_net)
circuit.R('9_2_9_3', 'net_9_2', 'net_9_3', r_net)
circuit.R('9_3_9_4', 'net_9_3', 'net_9_4', r_net)
circuit.R('9_4_9_5', 'net_9_4', 'net_9_5', r_net)
circuit.R('9_5_9_6', 'net_9_5', 'net_9_6', r_net)
circuit.R('9_6_9_7', 'net_9_6', 'net_9_7', r_net)
circuit.R('9_7_9_8', 'net_9_7', 'net_9_8', r_net)
circuit.R('9_8_9_9', 'net_9_8', 'net_9_9', r_net)
circuit.R('9_9_9_10', 'net_9_9', 'net_9_10', r_net)
circuit.R('9_10_9_11', 'net_9_10', 'net_9_11', r_net)
circuit.R('10_1_10_2', 'net_10_1', 'net_10_2', r_net)
circuit.R('10_2_10_3', 'net_10_2', 'net_10_3', r_net)
circuit.R('10_3_10_4', 'net_10_3', 'net_10_4', r_net)
circuit.R('10_4_10_5', 'net_10_4', 'net_10_5', r_net)
circuit.R('10_5_10_6', 'net_10_5', 'net_10_6', r_net)
circuit.R('10_6_10_7', 'net_10_6', 'net_10_7', r_net)
circuit.R('10_7_10_8', 'net_10_7', 'net_10_8', r_net)
circuit.R('10_8_10_9', 'net_10_8', 'net_10_9', r_net)
circuit.R('10_9_10_10', 'net_10_9', 'net_10_10', r_net)
circuit.R('10_10_10_11', 'net_10_10', 'net_10_11', r_net)
circuit.R('11_1_11_2', 'net_11_1', 'net_11_2', r_net)
circuit.R('11_2_11_3', 'net_11_2', 'net_11_3', r_net)
circuit.R('11_3_11_4', 'net_11_3', 'net_11_4', r_net)
circuit.R('11_4_11_5', 'net_11_4', 'net_11_5', r_net)
circuit.R('11_5_11_6', 'net_11_5', 'net_11_6', r_net)
circuit.R('11_6_11_7', 'net_11_6', 'net_11_7', r_net)
circuit.R('11_7_11_8', 'net_11_7', 'net_11_8', r_net)
circuit.R('11_8_11_9', 'net_11_8', 'net_11_9', r_net)
circuit.R('11_9_11_10', 'net_11_9', 'net_11_10', r_net)
circuit.R('11_10_11_11', 'net_11_10', 'net_11_11', r_net)

# N-S resistors
circuit.R('1_1_2_1', 'net_1_1', 'net_2_1', r_net)
circuit.R('1_2_2_2', 'net_1_2', 'net_2_2', r_net)
circuit.R('1_3_2_3', 'net_1_3', 'net_2_3', r_net)
circuit.R('1_4_2_4', 'net_1_4', 'net_2_4', r_net)
circuit.R('1_5_2_5', 'net_1_5', 'net_2_5', r_net)
circuit.R('1_6_2_6', 'net_1_6', 'net_2_6', r_net)
circuit.R('1_7_2_7', 'net_1_7', 'net_2_7', r_net)
circuit.R('1_8_2_8', 'net_1_8', 'net_2_8', r_net)
circuit.R('1_9_2_9', 'net_1_9', 'net_2_9', r_net)
circuit.R('1_10_2_10', 'net_1_10', 'net_2_10', r_net)
circuit.R('1_11_2_11', 'net_1_11', 'net_2_11', r_net)
circuit.R('2_1_3_1', 'net_2_1', 'net_3_1', r_net)
circuit.R('2_2_3_2', 'net_2_2', 'net_3_2', r_net)
circuit.R('2_3_3_3', 'net_2_3', 'net_3_3', r_net)
circuit.R('2_4_3_4', 'net_2_4', 'net_3_4', r_net)
circuit.R('2_5_3_5', 'net_2_5', 'net_3_5', r_net)
circuit.R('2_6_3_6', 'net_2_6', 'net_3_6', r_net)
circuit.R('2_7_3_7', 'net_2_7', 'net_3_7', r_net)
circuit.R('2_8_3_8', 'net_2_8', 'net_3_8', r_net)
circuit.R('2_9_3_9', 'net_2_9', 'net_3_9', r_net)
circuit.R('2_10_3_10', 'net_2_10', 'net_3_10', r_net)
circuit.R('2_11_3_11', 'net_2_11', 'net_3_11', r_net)
circuit.R('3_1_4_1', 'net_3_1', 'net_4_1', r_net)
circuit.R('3_2_4_2', 'net_3_2', 'net_4_2', r_net)
circuit.R('3_3_4_3', 'net_3_3', 'net_4_3', r_net)
circuit.R('3_4_4_4', 'net_3_4', 'net_4_4', r_net)
circuit.R('3_5_4_5', 'net_3_5', 'net_4_5', r_net)
circuit.R('3_6_4_6', 'net_3_6', 'net_4_6', r_net)
circuit.R('3_7_4_7', 'net_3_7', 'net_4_7', r_net)
circuit.R('3_8_4_8', 'net_3_8', 'net_4_8', r_net)
circuit.R('3_9_4_9', 'net_3_9', 'net_4_9', r_net)
circuit.R('3_10_4_10', 'net_3_10', 'net_4_10', r_net)
circuit.R('3_11_4_11', 'net_3_11', 'net_4_11', r_net)
circuit.R('4_1_5_1', 'net_4_1', 'net_5_1', r_net)
circuit.R('4_2_5_2', 'net_4_2', 'net_5_2', r_net)
circuit.R('4_3_5_3', 'net_4_3', 'net_5_3', r_net)
circuit.R('4_4_5_4', 'net_4_4', 'net_5_4', r_net)
circuit.R('4_5_5_5', 'net_4_5', 'net_5_5', r_net)
circuit.R('4_6_5_6', 'net_4_6', 'net_5_6', r_net)
circuit.R('4_7_5_7', 'net_4_7', 'net_5_7', r_net)
circuit.R('4_8_5_8', 'net_4_8', 'net_5_8', r_net)
circuit.R('4_9_5_9', 'net_4_9', 'net_5_9', r_net)
circuit.R('4_10_5_10', 'net_4_10', 'net_5_10', r_net)
circuit.R('4_11_5_11', 'net_4_11', 'net_5_11', r_net)
circuit.R('5_1_6_1', 'net_5_1', 'net_6_1', r_net)
circuit.R('5_2_6_2', 'net_5_2', 'net_6_2', r_net)
circuit.R('5_3_6_3', 'net_5_3', 'net_6_3', r_net)
circuit.R('5_4_6_4', 'net_5_4', 'net_6_4', r_net)
circuit.R('5_5_6_5', 'net_5_5', 'net_6_5', r_net)
circuit.R('5_6_6_6', 'net_5_6', 'net_6_6', r_net)
circuit.R('5_7_6_7', 'net_5_7', 'net_6_7', r_net)
circuit.R('5_8_6_8', 'net_5_8', 'net_6_8', r_net)
circuit.R('5_9_6_9', 'net_5_9', 'net_6_9', r_net)
circuit.R('5_10_6_10', 'net_5_10', 'net_6_10', r_net)
circuit.R('5_11_6_11', 'net_5_11', 'net_6_11', r_net)
circuit.R('6_1_7_1', 'net_6_1', 'net_7_1', r_net)
circuit.R('6_2_7_2', 'net_6_2', 'net_7_2', r_net)
circuit.R('6_3_7_3', 'net_6_3', 'net_7_3', r_net)
circuit.R('6_4_7_4', 'net_6_4', 'net_7_4', r_net)
circuit.R('6_5_7_5', 'net_6_5', 'net_7_5', r_net)
circuit.R('6_6_7_6', 'net_6_6', 'net_7_6', r_net)
circuit.R('6_7_7_7', 'net_6_7', 'net_7_7', r_net)
circuit.R('6_8_7_8', 'net_6_8', 'net_7_8', r_net)
circuit.R('6_9_7_9', 'net_6_9', 'net_7_9', r_net)
circuit.R('6_10_7_10', 'net_6_10', 'net_7_10', r_net)
circuit.R('6_11_7_11', 'net_6_11', 'net_7_11', r_net)
circuit.R('7_1_8_1', 'net_7_1', 'net_8_1', r_net)
circuit.R('7_2_8_2', 'net_7_2', 'net_8_2', r_net)
circuit.R('7_3_8_3', 'net_7_3', 'net_8_3', r_net)
circuit.R('7_4_8_4', 'net_7_4', 'net_8_4', r_net)
circuit.R('7_5_8_5', 'net_7_5', 'net_8_5', r_net)
circuit.R('7_6_8_6', 'net_7_6', 'net_8_6', r_net)
circuit.R('7_7_8_7', 'net_7_7', 'net_8_7', r_net)
circuit.R('7_8_8_8', 'net_7_8', 'net_8_8', r_net)
circuit.R('7_9_8_9', 'net_7_9', 'net_8_9', r_net)
circuit.R('7_10_8_10', 'net_7_10', 'net_8_10', r_net)
circuit.R('7_11_8_11', 'net_7_11', 'net_8_11', r_net)
circuit.R('8_1_9_1', 'net_8_1', 'net_9_1', r_net)
circuit.R('8_2_9_2', 'net_8_2', 'net_9_2', r_net)
circuit.R('8_3_9_3', 'net_8_3', 'net_9_3', r_net)
circuit.R('8_4_9_4', 'net_8_4', 'net_9_4', r_net)
circuit.R('8_5_9_5', 'net_8_5', 'net_9_5', r_net)
circuit.R('8_6_9_6', 'net_8_6', 'net_9_6', r_net)
circuit.R('8_7_9_7', 'net_8_7', 'net_9_7', r_net)
circuit.R('8_8_9_8', 'net_8_8', 'net_9_8', r_net)
circuit.R('8_9_9_9', 'net_8_9', 'net_9_9', r_net)
circuit.R('8_10_9_10', 'net_8_10', 'net_9_10', r_net)
circuit.R('8_11_9_11', 'net_8_11', 'net_9_11', r_net)
circuit.R('9_1_10_1', 'net_9_1', 'net_10_1', r_net)
circuit.R('9_2_10_2', 'net_9_2', 'net_10_2', r_net)
circuit.R('9_3_10_3', 'net_9_3', 'net_10_3', r_net)
circuit.R('9_4_10_4', 'net_9_4', 'net_10_4', r_net)
circuit.R('9_5_10_5', 'net_9_5', 'net_10_5', r_net)
circuit.R('9_6_10_6', 'net_9_6', 'net_10_6', r_net)
circuit.R('9_7_10_7', 'net_9_7', 'net_10_7', r_net)
circuit.R('9_8_10_8', 'net_9_8', 'net_10_8', r_net)
circuit.R('9_9_10_9', 'net_9_9', 'net_10_9', r_net)
circuit.R('9_10_10_10', 'net_9_10', 'net_10_10', r_net)
circuit.R('9_11_10_11', 'net_9_11', 'net_10_11', r_net)
circuit.R('10_1_11_1', 'net_10_1', 'net_11_1', r_net)
circuit.R('10_2_11_2', 'net_10_2', 'net_11_2', r_net)
circuit.R('10_3_11_3', 'net_10_3', 'net_11_3', r_net)
circuit.R('10_4_11_4', 'net_10_4', 'net_11_4', r_net)
circuit.R('10_5_11_5', 'net_10_5', 'net_11_5', r_net)
circuit.R('10_6_11_6', 'net_10_6', 'net_11_6', r_net)
circuit.R('10_7_11_7', 'net_10_7', 'net_11_7', r_net)
circuit.R('10_8_11_8', 'net_10_8', 'net_11_8', r_net)
circuit.R('10_9_11_9', 'net_10_9', 'net_11_9', r_net)
circuit.R('10_10_11_10', 'net_10_10', 'net_11_10', r_net)
circuit.R('10_11_11_11', 'net_10_11', 'net_11_11', r_net)

# NW-SE resistors
circuit.R('1_1_2_2', 'net_1_1', 'net_2_2',  r_net)
circuit.R('1_2_2_3', 'net_1_2', 'net_2_3',  r_net)
circuit.R('1_3_2_4', 'net_1_3', 'net_2_4',  r_net)
circuit.R('1_4_2_5', 'net_1_4', 'net_2_5',  r_net)
circuit.R('1_5_2_6', 'net_1_5', 'net_2_6',  r_net)
circuit.R('1_6_2_7', 'net_1_6', 'net_2_7',  r_net)
circuit.R('1_7_2_8', 'net_1_7', 'net_2_8',  r_net)
circuit.R('1_8_2_9', 'net_1_8', 'net_2_9',  r_net)
circuit.R('1_9_2_10', 'net_1_9', 'net_2_10',  r_net)
circuit.R('1_10_2_11', 'net_1_10', 'net_2_11',  r_net)
circuit.R('2_1_3_2', 'net_2_1', 'net_3_2',  r_net)
circuit.R('2_2_3_3', 'net_2_2', 'net_3_3',  r_net)
circuit.R('2_3_3_4', 'net_2_3', 'net_3_4',  r_net)
circuit.R('2_4_3_5', 'net_2_4', 'net_3_5',  r_net)
circuit.R('2_5_3_6', 'net_2_5', 'net_3_6',  r_net)
circuit.R('2_6_3_7', 'net_2_6', 'net_3_7',  r_net)
circuit.R('2_7_3_8', 'net_2_7', 'net_3_8',  r_net)
circuit.R('2_8_3_9', 'net_2_8', 'net_3_9',  r_net)
circuit.R('2_9_3_10', 'net_2_9', 'net_3_10',  r_net)
circuit.R('2_10_3_11', 'net_2_10', 'net_3_11',  r_net)
circuit.R('3_1_4_2', 'net_3_1', 'net_4_2',  r_net)
circuit.R('3_2_4_3', 'net_3_2', 'net_4_3',  r_net)
circuit.R('3_3_4_4', 'net_3_3', 'net_4_4',  r_net)
circuit.R('3_4_4_5', 'net_3_4', 'net_4_5',  r_net)
circuit.R('3_5_4_6', 'net_3_5', 'net_4_6',  r_net)
circuit.R('3_6_4_7', 'net_3_6', 'net_4_7',  r_net)
circuit.R('3_7_4_8', 'net_3_7', 'net_4_8',  r_net)
circuit.R('3_8_4_9', 'net_3_8', 'net_4_9',  r_net)
circuit.R('3_9_4_10', 'net_3_9', 'net_4_10',  r_net)
circuit.R('3_10_4_11', 'net_3_10', 'net_4_11',  r_net)
circuit.R('4_1_5_2', 'net_4_1', 'net_5_2',  r_net)
circuit.R('4_2_5_3', 'net_4_2', 'net_5_3',  r_net)
circuit.R('4_3_5_4', 'net_4_3', 'net_5_4',  r_net)
circuit.R('4_4_5_5', 'net_4_4', 'net_5_5',  r_net)
circuit.R('4_5_5_6', 'net_4_5', 'net_5_6',  r_net)
circuit.R('4_6_5_7', 'net_4_6', 'net_5_7',  r_net)
circuit.R('4_7_5_8', 'net_4_7', 'net_5_8',  r_net)
circuit.R('4_8_5_9', 'net_4_8', 'net_5_9',  r_net)
circuit.R('4_9_5_10', 'net_4_9', 'net_5_10',  r_net)
circuit.R('4_10_5_11', 'net_4_10', 'net_5_11',  r_net)
circuit.R('5_1_6_2', 'net_5_1', 'net_6_2',  r_net)
circuit.R('5_2_6_3', 'net_5_2', 'net_6_3',  r_net)
circuit.R('5_3_6_4', 'net_5_3', 'net_6_4',  r_net)
circuit.R('5_4_6_5', 'net_5_4', 'net_6_5',  r_net)
circuit.R('5_5_6_6', 'net_5_5', 'net_6_6',  r_net)
circuit.R('5_6_6_7', 'net_5_6', 'net_6_7',  r_net)
circuit.R('5_7_6_8', 'net_5_7', 'net_6_8',  r_net)
circuit.R('5_8_6_9', 'net_5_8', 'net_6_9',  r_net)
circuit.R('5_9_6_10', 'net_5_9', 'net_6_10',  r_net)
circuit.R('5_10_6_11', 'net_5_10', 'net_6_11',  r_net)
circuit.R('6_1_7_2', 'net_6_1', 'net_7_2',  r_net)
circuit.R('6_2_7_3', 'net_6_2', 'net_7_3',  r_net)
circuit.R('6_3_7_4', 'net_6_3', 'net_7_4',  r_net)
circuit.R('6_4_7_5', 'net_6_4', 'net_7_5',  r_net)
circuit.R('6_5_7_6', 'net_6_5', 'net_7_6',  r_net)
circuit.R('6_6_7_7', 'net_6_6', 'net_7_7',  r_net)
circuit.R('6_7_7_8', 'net_6_7', 'net_7_8',  r_net)
circuit.R('6_8_7_9', 'net_6_8', 'net_7_9',  r_net)
circuit.R('6_9_7_10', 'net_6_9', 'net_7_10',  r_net)
circuit.R('6_10_7_11', 'net_6_10', 'net_7_11',  r_net)
circuit.R('7_1_8_2', 'net_7_1', 'net_8_2',  r_net)
circuit.R('7_2_8_3', 'net_7_2', 'net_8_3',  r_net)
circuit.R('7_3_8_4', 'net_7_3', 'net_8_4',  r_net)
circuit.R('7_4_8_5', 'net_7_4', 'net_8_5',  r_net)
circuit.R('7_5_8_6', 'net_7_5', 'net_8_6',  r_net)
circuit.R('7_6_8_7', 'net_7_6', 'net_8_7',  r_net)
circuit.R('7_7_8_8', 'net_7_7', 'net_8_8',  r_net)
circuit.R('7_8_8_9', 'net_7_8', 'net_8_9',  r_net)
circuit.R('7_9_8_10', 'net_7_9', 'net_8_10',  r_net)
circuit.R('7_10_8_11', 'net_7_10', 'net_8_11',  r_net)
circuit.R('8_1_9_2', 'net_8_1', 'net_9_2',  r_net)
circuit.R('8_2_9_3', 'net_8_2', 'net_9_3',  r_net)
circuit.R('8_3_9_4', 'net_8_3', 'net_9_4',  r_net)
circuit.R('8_4_9_5', 'net_8_4', 'net_9_5',  r_net)
circuit.R('8_5_9_6', 'net_8_5', 'net_9_6',  r_net)
circuit.R('8_6_9_7', 'net_8_6', 'net_9_7',  r_net)
circuit.R('8_7_9_8', 'net_8_7', 'net_9_8',  r_net)
circuit.R('8_8_9_9', 'net_8_8', 'net_9_9',  r_net)
circuit.R('8_9_9_10', 'net_8_9', 'net_9_10',  r_net)
circuit.R('8_10_9_11', 'net_8_10', 'net_9_11',  r_net)
circuit.R('9_1_10_2', 'net_9_1', 'net_10_2',  r_net)
circuit.R('9_2_10_3', 'net_9_2', 'net_10_3',  r_net)
circuit.R('9_3_10_4', 'net_9_3', 'net_10_4',  r_net)
circuit.R('9_4_10_5', 'net_9_4', 'net_10_5',  r_net)
circuit.R('9_5_10_6', 'net_9_5', 'net_10_6',  r_net)
circuit.R('9_6_10_7', 'net_9_6', 'net_10_7',  r_net)
circuit.R('9_7_10_8', 'net_9_7', 'net_10_8',  r_net)
circuit.R('9_8_10_9', 'net_9_8', 'net_10_9',  r_net)
circuit.R('9_9_10_10', 'net_9_9', 'net_10_10',  r_net)
circuit.R('9_10_10_11', 'net_9_10', 'net_10_11',  r_net)
circuit.R('10_1_11_2', 'net_10_1', 'net_11_2',  r_net)
circuit.R('10_2_11_3', 'net_10_2', 'net_11_3',  r_net)
circuit.R('10_3_11_4', 'net_10_3', 'net_11_4',  r_net)
circuit.R('10_4_11_5', 'net_10_4', 'net_11_5',  r_net)
circuit.R('10_5_11_6', 'net_10_5', 'net_11_6',  r_net)
circuit.R('10_6_11_7', 'net_10_6', 'net_11_7',  r_net)
circuit.R('10_7_11_8', 'net_10_7', 'net_11_8',  r_net)
circuit.R('10_8_11_9', 'net_10_8', 'net_11_9',  r_net)
circuit.R('10_9_11_10', 'net_10_9', 'net_11_10',  r_net)
circuit.R('10_10_11_11', 'net_10_10', 'net_11_11',  r_net)

# Capacitors
circuit.C('1_1', 'net_1_1', circuit.gnd, c)
circuit.C('1_2', 'net_1_2', circuit.gnd, c)
circuit.C('1_3', 'net_1_3', circuit.gnd, c)
circuit.C('1_4', 'net_1_4', circuit.gnd, c)
circuit.C('1_5', 'net_1_5', circuit.gnd, c)
circuit.C('1_6', 'net_1_6', circuit.gnd, c)
circuit.C('1_7', 'net_1_7', circuit.gnd, c)
circuit.C('1_8', 'net_1_8', circuit.gnd, c)
circuit.C('1_9', 'net_1_9', circuit.gnd, c)
circuit.C('1_10', 'net_1_10', circuit.gnd, c)
circuit.C('1_11', 'net_1_11', circuit.gnd, c)
circuit.C('2_1', 'net_2_1', circuit.gnd, c)
circuit.C('2_2', 'net_2_2', circuit.gnd, c)
circuit.C('2_3', 'net_2_3', circuit.gnd, c)
circuit.C('2_4', 'net_2_4', circuit.gnd, c)
circuit.C('2_5', 'net_2_5', circuit.gnd, c)
circuit.C('2_6', 'net_2_6', circuit.gnd, c)
circuit.C('2_7', 'net_2_7', circuit.gnd, c)
circuit.C('2_8', 'net_2_8', circuit.gnd, c)
circuit.C('2_9', 'net_2_9', circuit.gnd, c)
circuit.C('2_10', 'net_2_10', circuit.gnd, c)
circuit.C('2_11', 'net_2_11', circuit.gnd, c)
circuit.C('3_1', 'net_3_1', circuit.gnd, c)
circuit.C('3_2', 'net_3_2', circuit.gnd, c)
circuit.C('3_3', 'net_3_3', circuit.gnd, c)
circuit.C('3_4', 'net_3_4', circuit.gnd, c)
circuit.C('3_5', 'net_3_5', circuit.gnd, c)
circuit.C('3_6', 'net_3_6', circuit.gnd, c)
circuit.C('3_7', 'net_3_7', circuit.gnd, c)
circuit.C('3_8', 'net_3_8', circuit.gnd, c)
circuit.C('3_9', 'net_3_9', circuit.gnd, c)
circuit.C('3_10', 'net_3_10', circuit.gnd, c)
circuit.C('3_11', 'net_3_11', circuit.gnd, c)
circuit.C('4_1', 'net_4_1', circuit.gnd, c)
circuit.C('4_2', 'net_4_2', circuit.gnd, c)
circuit.C('4_3', 'net_4_3', circuit.gnd, c)
circuit.C('4_4', 'net_4_4', circuit.gnd, c)
circuit.C('4_5', 'net_4_5', circuit.gnd, c)
circuit.C('4_6', 'net_4_6', circuit.gnd, c)
circuit.C('4_7', 'net_4_7', circuit.gnd, c)
circuit.C('4_8', 'net_4_8', circuit.gnd, c)
circuit.C('4_9', 'net_4_9', circuit.gnd, c)
circuit.C('4_10', 'net_4_10', circuit.gnd, c)
circuit.C('4_11', 'net_4_11', circuit.gnd, c)
circuit.C('5_1', 'net_5_1', circuit.gnd, c)
circuit.C('5_2', 'net_5_2', circuit.gnd, c)
circuit.C('5_3', 'net_5_3', circuit.gnd, c)
circuit.C('5_4', 'net_5_4', circuit.gnd, c)
circuit.C('5_5', 'net_5_5', circuit.gnd, c)
circuit.C('5_6', 'net_5_6', circuit.gnd, c)
circuit.C('5_7', 'net_5_7', circuit.gnd, c)
circuit.C('5_8', 'net_5_8', circuit.gnd, c)
circuit.C('5_9', 'net_5_9', circuit.gnd, c)
circuit.C('5_10', 'net_5_10', circuit.gnd, c)
circuit.C('5_11', 'net_5_11', circuit.gnd, c)
circuit.C('6_1', 'net_6_1', circuit.gnd, c)
circuit.C('6_2', 'net_6_2', circuit.gnd, c)
circuit.C('6_3', 'net_6_3', circuit.gnd, c)
circuit.C('6_4', 'net_6_4', circuit.gnd, c)
circuit.C('6_5', 'net_6_5', circuit.gnd, c)
circuit.C('6_6', 'net_6_6', circuit.gnd, c)
circuit.C('6_7', 'net_6_7', circuit.gnd, c)
circuit.C('6_8', 'net_6_8', circuit.gnd, c)
circuit.C('6_9', 'net_6_9', circuit.gnd, c)
circuit.C('6_10', 'net_6_10', circuit.gnd, c)
circuit.C('6_11', 'net_6_11', circuit.gnd, c)
circuit.C('7_1', 'net_7_1', circuit.gnd, c)
circuit.C('7_2', 'net_7_2', circuit.gnd, c)
circuit.C('7_3', 'net_7_3', circuit.gnd, c)
circuit.C('7_4', 'net_7_4', circuit.gnd, c)
circuit.C('7_5', 'net_7_5', circuit.gnd, c)
circuit.C('7_6', 'net_7_6', circuit.gnd, c)
circuit.C('7_7', 'net_7_7', circuit.gnd, c)
circuit.C('7_8', 'net_7_8', circuit.gnd, c)
circuit.C('7_9', 'net_7_9', circuit.gnd, c)
circuit.C('7_10', 'net_7_10', circuit.gnd, c)
circuit.C('7_11', 'net_7_11', circuit.gnd, c)
circuit.C('8_1', 'net_8_1', circuit.gnd, c)
circuit.C('8_2', 'net_8_2', circuit.gnd, c)
circuit.C('8_3', 'net_8_3', circuit.gnd, c)
circuit.C('8_4', 'net_8_4', circuit.gnd, c)
circuit.C('8_5', 'net_8_5', circuit.gnd, c)
circuit.C('8_6', 'net_8_6', circuit.gnd, c)
circuit.C('8_7', 'net_8_7', circuit.gnd, c)
circuit.C('8_8', 'net_8_8', circuit.gnd, c)
circuit.C('8_9', 'net_8_9', circuit.gnd, c)
circuit.C('8_10', 'net_8_10', circuit.gnd, c)
circuit.C('8_11', 'net_8_11', circuit.gnd, c)
circuit.C('9_1', 'net_9_1', circuit.gnd, c)
circuit.C('9_2', 'net_9_2', circuit.gnd, c)
circuit.C('9_3', 'net_9_3', circuit.gnd, c)
circuit.C('9_4', 'net_9_4', circuit.gnd, c)
circuit.C('9_5', 'net_9_5', circuit.gnd, c)
circuit.C('9_6', 'net_9_6', circuit.gnd, c)
circuit.C('9_7', 'net_9_7', circuit.gnd, c)
circuit.C('9_8', 'net_9_8', circuit.gnd, c)
circuit.C('9_9', 'net_9_9', circuit.gnd, c)
circuit.C('9_10', 'net_9_10', circuit.gnd, c)
circuit.C('9_11', 'net_9_11', circuit.gnd, c)
circuit.C('10_1', 'net_10_1', circuit.gnd, c)
circuit.C('10_2', 'net_10_2', circuit.gnd, c)
circuit.C('10_3', 'net_10_3', circuit.gnd, c)
circuit.C('10_4', 'net_10_4', circuit.gnd, c)
circuit.C('10_5', 'net_10_5', circuit.gnd, c)
circuit.C('10_6', 'net_10_6', circuit.gnd, c)
circuit.C('10_7', 'net_10_7', circuit.gnd, c)
circuit.C('10_8', 'net_10_8', circuit.gnd, c)
circuit.C('10_9', 'net_10_9', circuit.gnd, c)
circuit.C('10_10', 'net_10_10', circuit.gnd, c)
circuit.C('10_11', 'net_10_11', circuit.gnd, c)
circuit.C('11_1', 'net_11_1', circuit.gnd, c)
circuit.C('11_2', 'net_11_2', circuit.gnd, c)
circuit.C('11_3', 'net_11_3', circuit.gnd, c)
circuit.C('11_4', 'net_11_4', circuit.gnd, c)
circuit.C('11_5', 'net_11_5', circuit.gnd, c)
circuit.C('11_6', 'net_11_6', circuit.gnd, c)
circuit.C('11_7', 'net_11_7', circuit.gnd, c)
circuit.C('11_8', 'net_11_8', circuit.gnd, c)
circuit.C('11_9', 'net_11_9', circuit.gnd, c)
circuit.C('11_10', 'net_11_10', circuit.gnd, c)
circuit.C('11_11', 'net_11_11', circuit.gnd, c)

# Capacitors' Initial Condition
simulator.initial_condition(net_1_1=c_init)
simulator.initial_condition(net_1_2=c_init)
simulator.initial_condition(net_1_3=c_init)
simulator.initial_condition(net_1_4=c_init)
simulator.initial_condition(net_1_5=c_init)
simulator.initial_condition(net_1_6=c_init)
simulator.initial_condition(net_1_7=c_init)
simulator.initial_condition(net_1_8=c_init)
simulator.initial_condition(net_1_9=c_init)
simulator.initial_condition(net_1_10=c_init)
simulator.initial_condition(net_1_11=c_init)
simulator.initial_condition(net_2_1=c_init)
simulator.initial_condition(net_2_2=c_init)
simulator.initial_condition(net_2_3=c_init)
simulator.initial_condition(net_2_4=c_init)
simulator.initial_condition(net_2_5=c_init)
simulator.initial_condition(net_2_6=c_init)
simulator.initial_condition(net_2_7=c_init)
simulator.initial_condition(net_2_8=c_init)
simulator.initial_condition(net_2_9=c_init)
simulator.initial_condition(net_2_10=c_init)
simulator.initial_condition(net_2_11=c_init)
simulator.initial_condition(net_3_1=c_init)
simulator.initial_condition(net_3_2=c_init)
simulator.initial_condition(net_3_3=c_init)
simulator.initial_condition(net_3_4=c_init)
simulator.initial_condition(net_3_5=c_init)
simulator.initial_condition(net_3_6=c_init)
simulator.initial_condition(net_3_7=c_init)
simulator.initial_condition(net_3_8=c_init)
simulator.initial_condition(net_3_9=c_init)
simulator.initial_condition(net_3_10=c_init)
simulator.initial_condition(net_3_11=c_init)
simulator.initial_condition(net_4_1=c_init)
simulator.initial_condition(net_4_2=c_init)
simulator.initial_condition(net_4_3=c_init)
simulator.initial_condition(net_4_4=c_init)
simulator.initial_condition(net_4_5=c_init)
simulator.initial_condition(net_4_6=c_init)
simulator.initial_condition(net_4_7=c_init)
simulator.initial_condition(net_4_8=c_init)
simulator.initial_condition(net_4_9=c_init)
simulator.initial_condition(net_4_10=c_init)
simulator.initial_condition(net_4_11=c_init)
simulator.initial_condition(net_5_1=c_init)
simulator.initial_condition(net_5_2=c_init)
simulator.initial_condition(net_5_3=c_init)
simulator.initial_condition(net_5_4=c_init)
simulator.initial_condition(net_5_5=c_init)
simulator.initial_condition(net_5_6=c_init)
simulator.initial_condition(net_5_7=c_init)
simulator.initial_condition(net_5_8=c_init)
simulator.initial_condition(net_5_9=c_init)
simulator.initial_condition(net_5_10=c_init)
simulator.initial_condition(net_5_11=c_init)
simulator.initial_condition(net_6_1=c_init)
simulator.initial_condition(net_6_2=c_init)
simulator.initial_condition(net_6_3=c_init)
simulator.initial_condition(net_6_4=c_init)
simulator.initial_condition(net_6_5=c_init)
simulator.initial_condition(net_6_6=c_init)
simulator.initial_condition(net_6_7=c_init)
simulator.initial_condition(net_6_8=c_init)
simulator.initial_condition(net_6_9=c_init)
simulator.initial_condition(net_6_10=c_init)
simulator.initial_condition(net_6_11=c_init)
simulator.initial_condition(net_7_1=c_init)
simulator.initial_condition(net_7_2=c_init)
simulator.initial_condition(net_7_3=c_init)
simulator.initial_condition(net_7_4=c_init)
simulator.initial_condition(net_7_5=c_init)
simulator.initial_condition(net_7_6=c_init)
simulator.initial_condition(net_7_7=c_init)
simulator.initial_condition(net_7_8=c_init)
simulator.initial_condition(net_7_9=c_init)
simulator.initial_condition(net_7_10=c_init)
simulator.initial_condition(net_7_11=c_init)
simulator.initial_condition(net_8_1=c_init)
simulator.initial_condition(net_8_2=c_init)
simulator.initial_condition(net_8_3=c_init)
simulator.initial_condition(net_8_4=c_init)
simulator.initial_condition(net_8_5=c_init)
simulator.initial_condition(net_8_6=c_init)
simulator.initial_condition(net_8_7=c_init)
simulator.initial_condition(net_8_8=c_init)
simulator.initial_condition(net_8_9=c_init)
simulator.initial_condition(net_8_10=c_init)
simulator.initial_condition(net_8_11=c_init)
simulator.initial_condition(net_9_1=c_init)
simulator.initial_condition(net_9_2=c_init)
simulator.initial_condition(net_9_3=c_init)
simulator.initial_condition(net_9_4=c_init)
simulator.initial_condition(net_9_5=c_init)
simulator.initial_condition(net_9_6=c_init)
simulator.initial_condition(net_9_7=c_init)
simulator.initial_condition(net_9_8=c_init)
simulator.initial_condition(net_9_9=c_init)
simulator.initial_condition(net_9_10=c_init)
simulator.initial_condition(net_9_11=c_init)
simulator.initial_condition(net_10_1=c_init)
simulator.initial_condition(net_10_2=c_init)
simulator.initial_condition(net_10_3=c_init)
simulator.initial_condition(net_10_4=c_init)
simulator.initial_condition(net_10_5=c_init)
simulator.initial_condition(net_10_6=c_init)
simulator.initial_condition(net_10_7=c_init)
simulator.initial_condition(net_10_8=c_init)
simulator.initial_condition(net_10_9=c_init)
simulator.initial_condition(net_10_10=c_init)
simulator.initial_condition(net_10_11=c_init)
simulator.initial_condition(net_11_1=c_init)
simulator.initial_condition(net_11_2=c_init)
simulator.initial_condition(net_11_3=c_init)
simulator.initial_condition(net_11_4=c_init)
simulator.initial_condition(net_11_5=c_init)
simulator.initial_condition(net_11_6=c_init)
simulator.initial_condition(net_11_7=c_init)
simulator.initial_condition(net_11_8=c_init)
simulator.initial_condition(net_11_9=c_init)
simulator.initial_condition(net_11_10=c_init)
simulator.initial_condition(net_11_11=c_init)

# Output Resistor
circuit.R('1_1', 'net_1_1', 'vin_1_1', r_out)
circuit.R('1_2', 'net_1_2', 'vin_1_2', r_out)
circuit.R('1_3', 'net_1_3', 'vin_1_3', r_out)
circuit.R('1_4', 'net_1_4', 'vin_1_4', r_out)
circuit.R('1_5', 'net_1_5', 'vin_1_5', r_out)
circuit.R('1_6', 'net_1_6', 'vin_1_6', r_out)
circuit.R('1_7', 'net_1_7', 'vin_1_7', r_out)
circuit.R('1_8', 'net_1_8', 'vin_1_8', r_out)
circuit.R('1_9', 'net_1_9', 'vin_1_9', r_out)
circuit.R('1_10', 'net_1_10', 'vin_1_10', r_out)
circuit.R('1_11', 'net_1_11', 'vin_1_11', r_out)
circuit.R('2_1', 'net_2_1', 'vin_2_1', r_out)
circuit.R('2_2', 'net_2_2', 'vin_2_2', r_out)
circuit.R('2_3', 'net_2_3', 'vin_2_3', r_out)
circuit.R('2_4', 'net_2_4', 'vin_2_4', r_out)
circuit.R('2_5', 'net_2_5', 'vin_2_5', r_out)
circuit.R('2_6', 'net_2_6', 'vin_2_6', r_out)
circuit.R('2_7', 'net_2_7', 'vin_2_7', r_out)
circuit.R('2_8', 'net_2_8', 'vin_2_8', r_out)
circuit.R('2_9', 'net_2_9', 'vin_2_9', r_out)
circuit.R('2_10', 'net_2_10', 'vin_2_10', r_out)
circuit.R('2_11', 'net_2_11', 'vin_2_11', r_out)
circuit.R('3_1', 'net_3_1', 'vin_3_1', r_out)
circuit.R('3_2', 'net_3_2', 'vin_3_2', r_out)
circuit.R('3_3', 'net_3_3', 'vin_3_3', r_out)
circuit.R('3_4', 'net_3_4', 'vin_3_4', r_out)
circuit.R('3_5', 'net_3_5', 'vin_3_5', r_out)
circuit.R('3_6', 'net_3_6', 'vin_3_6', r_out)
circuit.R('3_7', 'net_3_7', 'vin_3_7', r_out)
circuit.R('3_8', 'net_3_8', 'vin_3_8', r_out)
circuit.R('3_9', 'net_3_9', 'vin_3_9', r_out)
circuit.R('3_10', 'net_3_10', 'vin_3_10', r_out)
circuit.R('3_11', 'net_3_11', 'vin_3_11', r_out)
circuit.R('4_1', 'net_4_1', 'vin_4_1', r_out)
circuit.R('4_2', 'net_4_2', 'vin_4_2', r_out)
circuit.R('4_3', 'net_4_3', 'vin_4_3', r_out)
circuit.R('4_4', 'net_4_4', 'vin_4_4', r_out)
circuit.R('4_5', 'net_4_5', 'vin_4_5', r_out)
circuit.R('4_6', 'net_4_6', 'vin_4_6', r_out)
circuit.R('4_7', 'net_4_7', 'vin_4_7', r_out)
circuit.R('4_8', 'net_4_8', 'vin_4_8', r_out)
circuit.R('4_9', 'net_4_9', 'vin_4_9', r_out)
circuit.R('4_10', 'net_4_10', 'vin_4_10', r_out)
circuit.R('4_11', 'net_4_11', 'vin_4_11', r_out)
circuit.R('5_1', 'net_5_1', 'vin_5_1', r_out)
circuit.R('5_2', 'net_5_2', 'vin_5_2', r_out)
circuit.R('5_3', 'net_5_3', 'vin_5_3', r_out)
circuit.R('5_4', 'net_5_4', 'vin_5_4', r_out)
circuit.R('5_5', 'net_5_5', 'vin_5_5', r_out)
circuit.R('5_6', 'net_5_6', 'vin_5_6', r_out)
circuit.R('5_7', 'net_5_7', 'vin_5_7', r_out)
circuit.R('5_8', 'net_5_8', 'vin_5_8', r_out)
circuit.R('5_9', 'net_5_9', 'vin_5_9', r_out)
circuit.R('5_10', 'net_5_10', 'vin_5_10', r_out)
circuit.R('5_11', 'net_5_11', 'vin_5_11', r_out)
circuit.R('6_1', 'net_6_1', 'vin_6_1', r_out)
circuit.R('6_2', 'net_6_2', 'vin_6_2', r_out)
circuit.R('6_3', 'net_6_3', 'vin_6_3', r_out)
circuit.R('6_4', 'net_6_4', 'vin_6_4', r_out)
circuit.R('6_5', 'net_6_5', 'vin_6_5', r_out)
circuit.R('6_6', 'net_6_6', 'vin_6_6', r_out)
circuit.R('6_7', 'net_6_7', 'vin_6_7', r_out)
circuit.R('6_8', 'net_6_8', 'vin_6_8', r_out)
circuit.R('6_9', 'net_6_9', 'vin_6_9', r_out)
circuit.R('6_10', 'net_6_10', 'vin_6_10', r_out)
circuit.R('6_11', 'net_6_11', 'vin_6_11', r_out)
circuit.R('7_1', 'net_7_1', 'vin_7_1', r_out)
circuit.R('7_2', 'net_7_2', 'vin_7_2', r_out)
circuit.R('7_3', 'net_7_3', 'vin_7_3', r_out)
circuit.R('7_4', 'net_7_4', 'vin_7_4', r_out)
circuit.R('7_5', 'net_7_5', 'vin_7_5', r_out)
circuit.R('7_6', 'net_7_6', 'vin_7_6', r_out)
circuit.R('7_7', 'net_7_7', 'vin_7_7', r_out)
circuit.R('7_8', 'net_7_8', 'vin_7_8', r_out)
circuit.R('7_9', 'net_7_9', 'vin_7_9', r_out)
circuit.R('7_10', 'net_7_10', 'vin_7_10', r_out)
circuit.R('7_11', 'net_7_11', 'vin_7_11', r_out)
circuit.R('8_1', 'net_8_1', 'vin_8_1', r_out)
circuit.R('8_2', 'net_8_2', 'vin_8_2', r_out)
circuit.R('8_3', 'net_8_3', 'vin_8_3', r_out)
circuit.R('8_4', 'net_8_4', 'vin_8_4', r_out)
circuit.R('8_5', 'net_8_5', 'vin_8_5', r_out)
circuit.R('8_6', 'net_8_6', 'vin_8_6', r_out)
circuit.R('8_7', 'net_8_7', 'vin_8_7', r_out)
circuit.R('8_8', 'net_8_8', 'vin_8_8', r_out)
circuit.R('8_9', 'net_8_9', 'vin_8_9', r_out)
circuit.R('8_10', 'net_8_10', 'vin_8_10', r_out)
circuit.R('8_11', 'net_8_11', 'vin_8_11', r_out)
circuit.R('9_1', 'net_9_1', 'vin_9_1', r_out)
circuit.R('9_2', 'net_9_2', 'vin_9_2', r_out)
circuit.R('9_3', 'net_9_3', 'vin_9_3', r_out)
circuit.R('9_4', 'net_9_4', 'vin_9_4', r_out)
circuit.R('9_5', 'net_9_5', 'vin_9_5', r_out)
circuit.R('9_6', 'net_9_6', 'vin_9_6', r_out)
circuit.R('9_7', 'net_9_7', 'vin_9_7', r_out)
circuit.R('9_8', 'net_9_8', 'vin_9_8', r_out)
circuit.R('9_9', 'net_9_9', 'vin_9_9', r_out)
circuit.R('9_10', 'net_9_10', 'vin_9_10', r_out)
circuit.R('9_11', 'net_9_11', 'vin_9_11', r_out)
circuit.R('10_1', 'net_10_1', 'vin_10_1', r_out)
circuit.R('10_2', 'net_10_2', 'vin_10_2', r_out)
circuit.R('10_3', 'net_10_3', 'vin_10_3', r_out)
circuit.R('10_4', 'net_10_4', 'vin_10_4', r_out)
circuit.R('10_5', 'net_10_5', 'vin_10_5', r_out)
circuit.R('10_6', 'net_10_6', 'vin_10_6', r_out)
circuit.R('10_7', 'net_10_7', 'vin_10_7', r_out)
circuit.R('10_8', 'net_10_8', 'vin_10_8', r_out)
circuit.R('10_9', 'net_10_9', 'vin_10_9', r_out)
circuit.R('10_10', 'net_10_10', 'vin_10_10', r_out)
circuit.R('10_11', 'net_10_11', 'vin_10_11', r_out)
circuit.R('11_1', 'net_11_1', 'vin_11_1', r_out)
circuit.R('11_2', 'net_11_2', 'vin_11_2', r_out)
circuit.R('11_3', 'net_11_3', 'vin_11_3', r_out)
circuit.R('11_4', 'net_11_4', 'vin_11_4', r_out)
circuit.R('11_5', 'net_11_5', 'vin_11_5', r_out)
circuit.R('11_6', 'net_11_6', 'vin_11_6', r_out)
circuit.R('11_7', 'net_11_7', 'vin_11_7', r_out)
circuit.R('11_8', 'net_11_8', 'vin_11_8', r_out)
circuit.R('11_9', 'net_11_9', 'vin_11_9', r_out)
circuit.R('11_10', 'net_11_10', 'vin_11_10', r_out)
circuit.R('11_11', 'net_11_11', 'vin_11_11', r_out)

# Sensory Inputs
circuit.V('1_1', 'vin_1_1', circuit.gnd,  v_ambient)
circuit.V('1_2', 'vin_1_2', circuit.gnd,  v_ambient)
circuit.V('1_3', 'vin_1_3', circuit.gnd,  v_ambient)
circuit.V('1_4', 'vin_1_4', circuit.gnd,  v_ambient)
circuit.V('1_5', 'vin_1_5', circuit.gnd,  v_ambient)
circuit.V('1_6', 'vin_1_6', circuit.gnd,  v_ambient)
circuit.V('1_7', 'vin_1_7', circuit.gnd,  v_ambient)
circuit.V('1_8', 'vin_1_8', circuit.gnd,  v_ambient)
circuit.V('1_9', 'vin_1_9', circuit.gnd,  v_ambient)
circuit.V('1_10', 'vin_1_10', circuit.gnd,  v_ambient)
circuit.V('1_11', 'vin_1_11', circuit.gnd,  v_ambient)
circuit.V('2_1', 'vin_2_1', circuit.gnd,  v_ambient)
circuit.V('2_2', 'vin_2_2', circuit.gnd,  v_ambient)
circuit.V('2_3', 'vin_2_3', circuit.gnd,  v_ambient)
circuit.V('2_4', 'vin_2_4', circuit.gnd,  v_ambient)
circuit.V('2_5', 'vin_2_5', circuit.gnd,  v_ambient)
circuit.V('2_6', 'vin_2_6', circuit.gnd,  v_ambient)
circuit.V('2_7', 'vin_2_7', circuit.gnd,  v_ambient)
circuit.V('2_8', 'vin_2_8', circuit.gnd,  v_ambient)
circuit.V('2_9', 'vin_2_9', circuit.gnd,  v_ambient)
circuit.V('2_10', 'vin_2_10', circuit.gnd,  v_ambient)
circuit.V('2_11', 'vin_2_11', circuit.gnd,  v_ambient)
circuit.V('3_1', 'vin_3_1', circuit.gnd,  v_ambient)
circuit.V('3_2', 'vin_3_2', circuit.gnd,  v_ambient)
circuit.V('3_3', 'vin_3_3', circuit.gnd,  v_ambient)
circuit.V('3_4', 'vin_3_4', circuit.gnd,  v_ambient)
circuit.V('3_5', 'vin_3_5', circuit.gnd,  v_ambient)
circuit.V('3_6', 'vin_3_6', circuit.gnd,  v_ambient)
circuit.V('3_7', 'vin_3_7', circuit.gnd,  v_ambient)
circuit.V('3_8', 'vin_3_8', circuit.gnd,  v_ambient)
circuit.V('3_9', 'vin_3_9', circuit.gnd,  v_ambient)
circuit.V('3_10', 'vin_3_10', circuit.gnd,  v_ambient)
circuit.V('3_11', 'vin_3_11', circuit.gnd,  v_ambient)
circuit.V('4_1', 'vin_4_1', circuit.gnd,  v_ambient)
circuit.V('4_2', 'vin_4_2', circuit.gnd,  v_ambient)
circuit.V('4_3', 'vin_4_3', circuit.gnd,  v_ambient)
circuit.V('4_4', 'vin_4_4', circuit.gnd,  v_ambient)
circuit.V('4_5', 'vin_4_5', circuit.gnd,  v_ambient)
circuit.V('4_6', 'vin_4_6', circuit.gnd,  v_ambient)
circuit.V('4_7', 'vin_4_7', circuit.gnd,  v_ambient)
circuit.V('4_8', 'vin_4_8', circuit.gnd,  v_ambient)
circuit.V('4_9', 'vin_4_9', circuit.gnd,  v_ambient)
circuit.V('4_10', 'vin_4_10', circuit.gnd,  v_ambient)
circuit.V('4_11', 'vin_4_11', circuit.gnd,  v_ambient)
circuit.V('5_1', 'vin_5_1', circuit.gnd,  v_ambient)
circuit.V('5_2', 'vin_5_2', circuit.gnd,  v_ambient)
circuit.V('5_3', 'vin_5_3', circuit.gnd,  v_ambient)
circuit.V('5_4', 'vin_5_4', circuit.gnd,  v_ambient)
circuit.V('5_5', 'vin_5_5', circuit.gnd,  v_ambient)
circuit.V('5_6', 'vin_5_6', circuit.gnd,  v_ambient)
circuit.V('5_7', 'vin_5_7', circuit.gnd,  v_ambient)
circuit.V('5_8', 'vin_5_8', circuit.gnd,  v_ambient)
circuit.V('5_9', 'vin_5_9', circuit.gnd,  v_ambient)
circuit.V('5_10', 'vin_5_10', circuit.gnd,  v_ambient)
circuit.V('5_11', 'vin_5_11', circuit.gnd,  v_ambient)
circuit.V('6_1', 'vin_6_1', circuit.gnd,  v_ambient)
circuit.V('6_2', 'vin_6_2', circuit.gnd,  v_ambient)
circuit.V('6_3', 'vin_6_3', circuit.gnd,  v_ambient)
circuit.V('6_4', 'vin_6_4', circuit.gnd,  v_ambient)
circuit.V('6_5', 'vin_6_5', circuit.gnd,  v_ambient)
circuit.V('6_6', 'vin_6_6', 'different_in',  v_ambient)
circuit.V('6_7', 'vin_6_7', circuit.gnd,  v_ambient)
circuit.V('6_8', 'vin_6_8', circuit.gnd,  v_ambient)
circuit.V('6_9', 'vin_6_9', circuit.gnd,  v_ambient)
circuit.V('6_10', 'vin_6_10', circuit.gnd,  v_ambient)
circuit.V('6_11', 'vin_6_11', circuit.gnd,  v_ambient)
circuit.V('7_1', 'vin_7_1', circuit.gnd,  v_ambient)
circuit.V('7_2', 'vin_7_2', circuit.gnd,  v_ambient)
circuit.V('7_3', 'vin_7_3', circuit.gnd,  v_ambient)
circuit.V('7_4', 'vin_7_4', circuit.gnd,  v_ambient)
circuit.V('7_5', 'vin_7_5', circuit.gnd,  v_ambient)
circuit.V('7_6', 'vin_7_6', circuit.gnd,  v_ambient)
circuit.V('7_7', 'vin_7_7', circuit.gnd,  v_ambient)
circuit.V('7_8', 'vin_7_8', circuit.gnd,  v_ambient)
circuit.V('7_9', 'vin_7_9', circuit.gnd,  v_ambient)
circuit.V('7_10', 'vin_7_10', circuit.gnd,  v_ambient)
circuit.V('7_11', 'vin_7_11', circuit.gnd,  v_ambient)
circuit.V('8_1', 'vin_8_1', circuit.gnd,  v_ambient)
circuit.V('8_2', 'vin_8_2', circuit.gnd,  v_ambient)
circuit.V('8_3', 'vin_8_3', circuit.gnd,  v_ambient)
circuit.V('8_4', 'vin_8_4', circuit.gnd,  v_ambient)
circuit.V('8_5', 'vin_8_5', circuit.gnd,  v_ambient)
circuit.V('8_6', 'vin_8_6', circuit.gnd,  v_ambient)
circuit.V('8_7', 'vin_8_7', circuit.gnd,  v_ambient)
circuit.V('8_8', 'vin_8_8', circuit.gnd,  v_ambient)
circuit.V('8_9', 'vin_8_9', circuit.gnd,  v_ambient)
circuit.V('8_10', 'vin_8_10', circuit.gnd,  v_ambient)
circuit.V('8_11', 'vin_8_11', circuit.gnd,  v_ambient)
circuit.V('9_1', 'vin_9_1', circuit.gnd,  v_ambient)
circuit.V('9_2', 'vin_9_2', circuit.gnd,  v_ambient)
circuit.V('9_3', 'vin_9_3', circuit.gnd,  v_ambient)
circuit.V('9_4', 'vin_9_4', circuit.gnd,  v_ambient)
circuit.V('9_5', 'vin_9_5', circuit.gnd,  v_ambient)
circuit.V('9_6', 'vin_9_6', circuit.gnd,  v_ambient)
circuit.V('9_7', 'vin_9_7', circuit.gnd,  v_ambient)
circuit.V('9_8', 'vin_9_8', circuit.gnd,  v_ambient)
circuit.V('9_9', 'vin_9_9', circuit.gnd,  v_ambient)
circuit.V('9_10', 'vin_9_10', circuit.gnd,  v_ambient)
circuit.V('9_11', 'vin_9_11', circuit.gnd,  v_ambient)
circuit.V('10_1', 'vin_10_1', circuit.gnd,  v_ambient)
circuit.V('10_2', 'vin_10_2', circuit.gnd,  v_ambient)
circuit.V('10_3', 'vin_10_3', circuit.gnd,  v_ambient)
circuit.V('10_4', 'vin_10_4', circuit.gnd,  v_ambient)
circuit.V('10_5', 'vin_10_5', circuit.gnd,  v_ambient)
circuit.V('10_6', 'vin_10_6', circuit.gnd,  v_ambient)
circuit.V('10_7', 'vin_10_7', circuit.gnd,  v_ambient)
circuit.V('10_8', 'vin_10_8', circuit.gnd,  v_ambient)
circuit.V('10_9', 'vin_10_9', circuit.gnd,  v_ambient)
circuit.V('10_10', 'vin_10_10', circuit.gnd,  v_ambient)
circuit.V('10_11', 'vin_10_11', circuit.gnd,  v_ambient)
circuit.V('11_1', 'vin_11_1', circuit.gnd,  v_ambient)
circuit.V('11_2', 'vin_11_2', circuit.gnd,  v_ambient)
circuit.V('11_3', 'vin_11_3', circuit.gnd,  v_ambient)
circuit.V('11_4', 'vin_11_4', circuit.gnd,  v_ambient)
circuit.V('11_5', 'vin_11_5', circuit.gnd,  v_ambient)
circuit.V('11_6', 'vin_11_6', circuit.gnd,  v_ambient)
circuit.V('11_7', 'vin_11_7', circuit.gnd,  v_ambient)
circuit.V('11_8', 'vin_11_8', circuit.gnd,  v_ambient)
circuit.V('11_9', 'vin_11_9', circuit.gnd,  v_ambient)
circuit.V('11_10', 'vin_11_10', circuit.gnd,  v_ambient)
circuit.V('11_11', 'vin_11_11', circuit.gnd,  v_ambient)


'''
# Quiescent Operating Point

circuit.V('dc_sig', 'different_in', circuit.gnd, 10@u_V)

analysis = simulator.operating_point()

out_dict = format_output(analysis)

print(out_dict)

map_arr_vin = getArray(out_dict, 'vin', row, column, 0)
map_arr_net = getArray(out_dict, 'net', row, column, 0)
map_arr_res = map_arr_vin - map_arr_net


print('Arr_net')
print(map_arr_net)
print('Arr_vin')
print(map_arr_vin)
print('Arr_res')
print(map_arr_res)

heatmap(map_arr_res, filepath='./bin/quiescent/',
        mapname='res_quiescent_', data_min=0, sequence=1)

'''

# Transient analysis

circuit.SinusoidalVoltageSource(
    'sin_signal', 'different_in', circuit.gnd, amplitude=2000@u_mV, frequency=1)


steptime = 40@u_ms
finaltime = 40000@u_ms
analysis = simulator.transient(step_time=steptime, end_time=finaltime)

out_dict = format_output(analysis)

print(out_dict)


max_data = -1000000000
min_data = 1000000000
start_point = 901
for i in range(start_point-1, int(finaltime/steptime), 1):
    map_arr_vin = getArray(out_dict, 'vin', row, column, i)
    map_arr_net = getArray(out_dict, 'net', row, column, i)
    map_arr_res = map_arr_vin - map_arr_net
    this_max = map_arr_res.max()
    this_min = map_arr_res.min()

    if this_max > max_data:
        max_data = this_max
    if this_min < min_data:
        min_data = this_min

mkpath = "D:\\Study\\01 NJU Courses\\18060090 Circuit Analysis\\Final Project\\Pyspice\\bin\\transcent\\" + \
    'Rnet=%s,Rout=%s,c=%s\\' % (r_net, r_out, c)
mkdir(mkpath)
del mkpath


for i in range(start_point-1, int(finaltime/steptime), 1):
    map_arr_vin = getArray(out_dict, 'vin', row, column, i)
    map_arr_net = getArray(out_dict, 'net', row, column, i)
    map_arr_res = map_arr_vin - map_arr_net

    heatmap(map_arr_res, filepath='./bin/transcent/' + '/Rnet=%s,Rout=%s,c=%s\\' % (r_net, r_out, c), mapname='res_trans_',
            sequence=i+1, amount=finaltime/steptime, start_point=start_point, data_max=0.05, data_min=-0.05)

    print('finished fig', i+2-start_point, ' / ',
          int(finaltime/steptime)-start_point+1)
'''
for i in range(start_point-1, int(finaltime/steptime), 1):
    map_arr_net = getArray(out_dict, 'net', row, column, i)
    # map_arr_net = getArray(out_dict, 'net', row, column, i)
    # map_arr_res = map_arr_vin - map_arr_net
    this_max = map_arr_net.max()
    this_min = map_arr_net.min()

    if this_max > max_data:
        max_data = this_max
    if this_min < min_data:
        min_data = this_min


for i in range(start_point-1, int(finaltime/steptime), 1):
    map_arr_net = getArray(out_dict, 'net', row, column, i)
    # map_arr_net = getArray(out_dict, 'net', row, column, i)
    # map_arr_res = map_arr_vin - map_arr_net

    heatmap(map_arr_net, filepath='./bin/transcent/' + '/Rnet=%s,Rout=%s,c=%s\\' % (r_net, r_out, c), mapname='net_trans_',
            sequence=i+1, amount=finaltime/steptime, start_point=start_point, data_max=max_data, data_min=min_data)

    print('finished fig', i+2-start_point, ' / ',
          int(finaltime/steptime)-start_point+1)
'''

'''
# Print the Circuits:
print("The circuit/Netlist : \n \n", circuit)
'''
'''
# Print the circuit and simulator settings
print("The Simulator : \n \n ", simulator)


# Run Analysis


print(analysis)


# Extract data from node
print(analysis.nodes['in'])
print(str(analysis.nodes['in']))
print(float(analysis.nodes['in']))
print(str(analysis.nodes['out']))
print(float(analysis.nodes['out']))
'''
exit()
